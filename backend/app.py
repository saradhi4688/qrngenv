from flask import Flask, jsonify, request
from flask_cors import CORS
import numpy as np
from qrng import QuantumRandomGenerator

app = Flask(__name__)
CORS(app)  # Enable CORS for all routes

qrng = QuantumRandomGenerator()

@app.route('/')
def home():
    return jsonify({
        "message": "Quantum Random Number Generator API",
        "version": "1.0.0",
        "endpoints": {
            "/generate": "POST - Generate quantum random numbers",
            "/info": "GET - Get API information"
        }
    })

@app.route('/generate', methods=['POST'])
def generate_random_numbers():
    try:
        data = request.get_json()
        
        num_bits = data.get('num_bits', 8)
        num_samples = data.get('num_samples', 10)
        
        # Validate input
        if not (1 <= num_bits <= 16):
            return jsonify({"error": "num_bits must be between 1 and 16"}), 400
        
        if not (1 <= num_samples <= 1000):
            return jsonify({"error": "num_samples must be between 1 and 1000"}), 400
        
        # Generate quantum random numbers
        numbers = qrng.generate_numbers(num_bits, num_samples)
        
        # Calculate statistics
        stats = {
            "mean": float(np.mean(numbers)),
            "std": float(np.std(numbers)),
            "min": int(np.min(numbers)),
            "max": int(np.max(numbers)),
            "range": int(np.max(numbers) - np.min(numbers))
        }
        
        return jsonify({
            "success": True,
            "numbers": numbers.tolist(),
            "statistics": stats,
            "parameters": {
                "num_bits": num_bits,
                "num_samples": num_samples,
                "max_value": 2**num_bits - 1
            }
        })
        
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/info')
def api_info():
    return jsonify({
        "api_name": "Quantum Random Number Generator",
        "description": "Simulates quantum random number generation using superposition principles",
        "quantum_principle": "Each bit is generated by simulating a qubit in superposition state |+⟩ = (|0⟩ + |1⟩)/√2",
        "measurement_probability": "Each measurement has exactly 50% probability for 0 or 1",
        "true_randomness": "Unlike classical PRNGs, quantum randomness cannot be predicted"
    })

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)
